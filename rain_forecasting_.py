# -*- coding: utf-8 -*-
"""Rain Forecasting.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zFH4wn9kIfDbFl8EAh4xNXtCtm287Avz
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sms
import warnings
# %matplotlib inline
warnings.filterwarnings('ignore')

data = pd.read_csv('/content/mumbai-monthly-rains.csv')

data.head()

data.shape

data.info()

data.isnull().sum()

data.columns

# Melt the dataframe
df1 = pd.melt(data, id_vars=['Year'], value_vars=['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug',
       'Sept', 'Oct', 'Nov', 'Dec'],var_name='Month',  value_name='Rainfall', ignore_index=True)

# Display the first few rows of the melted dataframe
print(df1.head())
df1.head()

df1['Month'].unique()

df1['Month_new'] = ''
for i in range(len(df1)):
  if df1['Month'][i] == 'Jan':
    df1['Month_new'][i] = 1
  elif df1['Month'][i] == 'Feb':
    df1['Month_new'][i] = 2
  elif df1['Month'][i] == 'Mar':
    df1['Month_new'][i] = 3
  elif df1['Month'][i] == 'April':
    df1['Month_new'][i] = 4
  elif df1['Month'][i] == 'May':
    df1['Month_new'][i] = 5
  elif df1['Month'][i] == 'June':
    df1['Month_new'][i] = 6
  elif df1['Month'][i] == 'July':
    df1['Month_new'][i] = 7
  elif df1['Month'][i] == 'Aug':
    df1['Month_new'][i] = 8
  elif df1['Month'][i] == 'Sept':
    df1['Month_new'][i] = 9
  elif df1['Month'][i] == 'Oct':
    df1['Month_new'][i] = 10
  elif df1['Month'][i] == 'Nov':
    df1['Month_new'][i] = 11
  elif df1['Month'][i] == 'Dec':
    df1['Month_new'][i] = 12

# Convert 'Year' column to string type
df1['Year'] = df1['Year'].astype(str)

# Create the 'date' column
df1['date'] = df1['Year'] + df1['Month']

df1

# Convert 'Year' column to string type
df1['Year'] = df1['Year'].astype(str)

# Create the 'date' column in 'YYYY-MM' format
df1['date'] = df1['Year'] + '-' + df1['Month_new'].astype(str).str.zfill(2) # Pad month with zero if single digit

# Convert 'date' column to datetime objects
df1['date']= pd.to_datetime(df1['date'], format='%Y-%m')

df1 = df1.sort_values(by='date', ascending=True)

df1

df =df1.drop(['Year','Month','Month_new'], axis=1)

df

df = df.set_index('date') # Set 'date' column as index

df

df.info()

df.isnull().sum()

df.shape

df.columns

df.describe()

df

df['Rainfall'].plot(kind='hist', bins=20, title='Rainfall')
plt.gca().spines[['top', 'right',]].set_visible(False)

df['Rainfall'].plot(kind='line', figsize=(8, 4), title='Rainfall')
plt.gca().spines[['top', 'right']].set_visible(False)

from statsmodels.tsa.stattools import adfuller

def adf_test(series):
  result = adfuller(series)
  print('ADF Statistics:', result[0])
  print('p-value:',result[1])
  if result[1] <= 0.05:
    print('Data is Stationary')
  else :
    print('Data is not stationary')

adf_test(df['Rainfall'])

df.plot()

from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

acf = plot_acf(df['Rainfall'].dropna()) # this gives us q

pacf = plot_pacf(df['Rainfall'].dropna()) # this gives us p

df.plot()

from statsmodels.tsa.arima.model import ARIMA

from datetime import datetime,timedelta
train_dataset_end = datetime(1955,12,1)
test_dataset_end = datetime(1960,12,1)

train_d =  df[:train_dataset_end]
test_d = df[train_dataset_end + timedelta(days = 1):test_dataset_end]

pred_start_date = test_d.index[0]
pred_end_date = test_d.index[-1]

model_arima = sms.tsa.ARIMA(train_d['Rainfall'],order=(3,0,3))

model = model_arima.fit()

model.summary()

pred = model.predict(start = pred_start_date,end = pred_end_date)

test_d['Predictions']=pred

test_d[['Rainfall','Predictions']].plot()

from statsmodels.tsa.statespace.sarimax import SARIMAX

model_sarimax = SARIMAX(train_d['Rainfall'],order=(3,0,3),seasonal_order=(3,0,3,12))

results = model_sarimax.fit()
results.summary()
predmax = results.predict(start = pred_start_date,end = pred_end_date)
test_d['Predictions']=predmax
test_d[['Rainfall','Predictions']].plot()